{"version":3,"sources":["draggable.directive.ts"],"names":["core_1","require","Draggable","element","this","topStart","leftStart","_allowDrag","prototype","ngOnInit","nativeElement","style","position","className","onMouseDown","event","button","md","clientY","top","replace","clientX","left","onMouseUp","onMouseMove","onTouchStart","changedTouches","stopPropagation","onTouchEnd","onTouchMove","Object","defineProperty","value","__decorate","HostListener","Input","Directive","selector","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAWAC,UAAA,WAME,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,EALnBC,KAAAC,SAAmB,EACnBD,KAAAE,UAAoB,EACpBF,KAAAG,YAAsB,EA6ExB,OAxEEL,EAAAM,UAAAC,SAAA,WAEML,KAAKG,aACPH,KAAKD,QAAQO,cAAcC,MAAMC,SAAW,WAC5CR,KAAKD,QAAQO,cAAcG,WAAa,sBAK5CX,EAAAM,UAAAM,YAAA,SAAYC,GACW,IAAjBA,EAAMC,SACVZ,KAAKa,IAAK,EACVb,KAAKC,SACHU,EAAMG,QAAUd,KAAKD,QAAQO,cAAcC,MAAMQ,IAAIC,QAAQ,KAAM,IACrEhB,KAAKE,UACHS,EAAMM,QAAUjB,KAAKD,QAAQO,cAAcC,MAAMW,KAAKF,QAAQ,KAAM,MAIxElB,EAAAM,UAAAe,UAAA,SAAUR,GACRX,KAAKa,IAAK,GAIZf,EAAAM,UAAAgB,YAAA,SAAYT,GACNX,KAAKa,IAAMb,KAAKG,aAClBH,KAAKD,QAAQO,cAAcC,MAAMQ,IAC/BJ,EAAMG,QAAUd,KAAKC,SAAW,KAClCD,KAAKD,QAAQO,cAAcC,MAAMW,KAC/BP,EAAMM,QAAUjB,KAAKE,UAAY,OAKvCJ,EAAAM,UAAAiB,aAAA,SAAaV,GACXX,KAAKa,IAAK,EACVb,KAAKC,SACHU,EAAMW,eAAe,GAAGR,QACxBd,KAAKD,QAAQO,cAAcC,MAAMQ,IAAIC,QAAQ,KAAM,IACrDhB,KAAKE,UACHS,EAAMW,eAAe,GAAGL,QACxBjB,KAAKD,QAAQO,cAAcC,MAAMW,KAAKF,QAAQ,KAAM,IACtDL,EAAMY,mBAIRzB,EAAAM,UAAAoB,WAAA,WACExB,KAAKa,IAAK,GAIZf,EAAAM,UAAAqB,YAAA,SAAYd,GACNX,KAAKa,IAAMb,KAAKG,aAClBH,KAAKD,QAAQO,cAAcC,MAAMQ,IAC/BJ,EAAMW,eAAe,GAAGR,QAAUd,KAAKC,SAAW,KACpDD,KAAKD,QAAQO,cAAcC,MAAMW,KAC/BP,EAAMW,eAAe,GAAGL,QAAUjB,KAAKE,UAAY,MAEvDS,EAAMY,mBAIRG,OAAAC,eAAI7B,EAAAM,UAAA,YAAS,KAAb,SAAcwB,GACZ5B,KAAKG,WAAayB,EACd5B,KAAKG,WACPH,KAAKD,QAAQO,cAAcG,WAAa,oBAExCT,KAAKD,QAAQO,cAAcG,UAAYT,KAAKD,QAAQO,cAAcG,UAAUO,QAC1E,oBACA,qCA5DNa,WAAA,CADCjC,OAAAkC,aAAa,YAAa,CAAC,uCAW5BD,WAAA,CADCjC,OAAAkC,aAAa,8CAMdD,WAAA,CADCjC,OAAAkC,aAAa,qBAAsB,CAAC,uCAWrCD,WAAA,CADCjC,OAAAkC,aAAa,aAAc,CAAC,wCAa7BD,WAAA,CADCjC,OAAAkC,aAAa,gDAMdD,WAAA,CADCjC,OAAAkC,aAAa,qBAAsB,CAAC,uCAYrCD,WAAA,CADCjC,OAAAmC,MAAM,+CArEIjC,EAAS+B,WAAA,CAHrBjC,OAAAoC,UAAU,CACTC,SAAU,yBAECnC,GAAb,GAAaoC,QAAApC,UAAAA","file":"draggable.directive.min.js","sourcesContent":["import {\r\n  HostListener,\r\n  ElementRef,\r\n  OnInit,\r\n  Input,\r\n  Directive,\r\n} from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[element-draggable]\",\r\n})\r\nexport class Draggable implements OnInit {\r\n  topStart: number = 0;\r\n  leftStart: number = 0;\r\n  _allowDrag: boolean = true;\r\n  md: boolean;\r\n\r\n  constructor(public element: ElementRef) {}\r\n\r\n  ngOnInit() {\r\n    // css changes\r\n    if (this._allowDrag) {\r\n      this.element.nativeElement.style.position = \"relative\";\r\n      this.element.nativeElement.className += \" cursor-draggable\";\r\n    }\r\n  }\r\n\r\n  @HostListener(\"mousedown\", [\"$event\"])\r\n  onMouseDown(event: MouseEvent) {\r\n    if (event.button === 2) return; // prevents right click drag, remove his if you don't want it\r\n    this.md = true;\r\n    this.topStart =\r\n      event.clientY - this.element.nativeElement.style.top.replace(\"px\", \"\");\r\n    this.leftStart =\r\n      event.clientX - this.element.nativeElement.style.left.replace(\"px\", \"\");\r\n  }\r\n\r\n  @HostListener(\"document:mouseup\")\r\n  onMouseUp(event: MouseEvent) {\r\n    this.md = false;\r\n  }\r\n\r\n  @HostListener(\"document:mousemove\", [\"$event\"])\r\n  onMouseMove(event: MouseEvent) {\r\n    if (this.md && this._allowDrag) {\r\n      this.element.nativeElement.style.top =\r\n        event.clientY - this.topStart + \"px\";\r\n      this.element.nativeElement.style.left =\r\n        event.clientX - this.leftStart + \"px\";\r\n    }\r\n  }\r\n\r\n  @HostListener(\"touchstart\", [\"$event\"])\r\n  onTouchStart(event: any) {\r\n    this.md = true;\r\n    this.topStart =\r\n      event.changedTouches[0].clientY -\r\n      this.element.nativeElement.style.top.replace(\"px\", \"\");\r\n    this.leftStart =\r\n      event.changedTouches[0].clientX -\r\n      this.element.nativeElement.style.left.replace(\"px\", \"\");\r\n    event.stopPropagation();\r\n  }\r\n\r\n  @HostListener(\"document:touchend\")\r\n  onTouchEnd() {\r\n    this.md = false;\r\n  }\r\n\r\n  @HostListener(\"document:touchmove\", [\"$event\"])\r\n  onTouchMove(event: any) {\r\n    if (this.md && this._allowDrag) {\r\n      this.element.nativeElement.style.top =\r\n        event.changedTouches[0].clientY - this.topStart + \"px\";\r\n      this.element.nativeElement.style.left =\r\n        event.changedTouches[0].clientX - this.leftStart + \"px\";\r\n    }\r\n    event.stopPropagation();\r\n  }\r\n\r\n  @Input(\"element-draggable\")\r\n  set allowDrag(value: boolean) {\r\n    this._allowDrag = value;\r\n    if (this._allowDrag)\r\n      this.element.nativeElement.className += \" cursor-draggable\";\r\n    else\r\n      this.element.nativeElement.className = this.element.nativeElement.className.replace(\r\n        \" cursor-draggable\",\r\n        \"\"\r\n      );\r\n  }\r\n}\r\n"]}